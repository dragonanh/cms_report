<?php

/**
 * sfGuardUser
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    imuzik
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser {

  public static function countBackendMemberLock($loc) {
    $result = sfGuardUserTable::getInstance()->createQuery('q')
            ->select('COUNT(q.id) as counts')
            ->where('q.is_active = ?', $loc)
            ->execute();
    return $result[0]['counts'];
  }

  /**
   * Returns whether or not the given password is valid.
   *
   * @param string $password
   * @return boolean
   */
  public function checkPasswordVSA($password)
  {
    $vsa = new VSAUtils();
    $params = array(
      'userName' => $this->getUsername(),
      'password' => $password,
      'domainCode' => 'VSA_SSO'
    );
    return $vsa->authen($params);
  }

  /**
   * Sets the user password.
   *
   * @param string $password
   */
  public function setPassword($password)
  {
    if (!$password && 0 == strlen($password))
    {
      return;
    }

    if (!$salt = $this->getSalt())
    {
      $salt = md5(rand(100000, 999999).$this->getUsername());
      $this->setSalt($salt);
    }
//    $modified = $this->getModified();
//    if ((!$algorithm = $this->getAlgorithm()) || (isset($modified['algorithm']) && $modified['algorithm'] == $this->getTable()->getDefaultValueOf('algorithm')))
//    {
//      $algorithm = sfConfig::get('app_sf_guard_plugin_algorithm_callable', 'sha1');
//    }
//    $algorithmAsStr = is_array($algorithm) ? $algorithm[0].'::'.$algorithm[1] : $algorithm;
    $algorithm = 'hash';
    if (!is_callable($algorithm))
    {
      throw new sfException(sprintf('The algorithm callable "%s" is not callable.', $algorithm));
    }
    $this->setAlgorithm($algorithm);

    $this->_set('password', call_user_func_array($algorithm, array('sha256',$salt.$password)));
  }

  public function checkPasswordByGuard($password)
  {
    $algorithm = $this->getAlgorithm();
    if (false !== $pos = strpos($algorithm, '::'))
    {
      $algorithm = array(substr($algorithm, 0, $pos), substr($algorithm, $pos + 2));
    }
    if (!is_callable($algorithm))
    {
      throw new sfException(sprintf('The algorithm callable "%s" is not callable.', $algorithm));
    }

    if($algorithm == 'hash'){
      return $this->getPassword() == call_user_func_array($algorithm, array('sha256',$this->getSalt().$password));
    }

    return $this->getPassword() == call_user_func_array($algorithm, array($this->getSalt().$password));
  }
}