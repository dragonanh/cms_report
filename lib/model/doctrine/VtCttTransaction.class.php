<?php

/**
 * VtCttTransaction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    cms_ctt
 * @subpackage model
 * @author     viettel
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class VtCttTransaction extends BaseVtCttTransaction
{
  public function getChannelName(){
    return VtCttChannelEnum::getName($this->getChannel());
  }

  public function getOrderTypeName(){
    $orderTypeArr = OrderTypeEnum::getArr();
    if($this->getOrderType() == 24){
      if($this->getCttPackage() == 1){
        $name = "Nạp tiền di động trả trước";
      }elseif(in_array($this->getServiceIndicator(), ["100000","200000"])){
        $name = "Gạch nợ di động trả sau";
      }else{
        $name = "Gạch nợ cố định";
      }
    }else{
      $name = isset($orderTypeArr[$this->getOrderType()]) ? $orderTypeArr[$this->getOrderType()] : "";
    }
    return $name;
  }
    public function getOmniErrorCodeName(){
    $i18n = sfContext::getInstance()->getI18N();
    if(empty($this->getStatus()))
      return "";
    if($this->getStatus() == 1 && is_null($this->getOmniErrorCode()))
      return $i18n->__('Chưa xác định (Timeout)');

    $status = $i18n->__('fail');
    if($this->getOmniErrorCode() == "0"){
      $status = $i18n->__('success');
    }elseif($this->getOmniErrorCode() == "500"){
      $status = $i18n->__('Chưa xác định (Timeout)');
    }
    if($this->getOrderType() == 24 || $this->getOrderType() == 8) {
      $vpg = $this->getVtVpgTransaction();
      if ($vpg && $vpg->getStatus() == 1) {
        $status = $i18n->__('success');
      }
    }
    return $status;
  }

  public function getReceiveTypeName(){
    $i18n = sfContext::getInstance()->getI18N();
    $content = json_decode($this->getContent());
    return $content->transactionPlace == 'SHOP' ? $i18n->__('tại cửa hàng') : $i18n->__('Tại nhà');
  }

  public function getMainPackage(){
    $content = json_decode($this->getContent());
    return $content->productInfo->bundleCode;
  }

  public function getVasPackage(){
    $content = json_decode($this->getContent());
    $listVas = $content->productInfo->vasInfos;
    $result = [];
    if(!empty($listVas)) {
      foreach ($listVas as $vas) {
        $result[] = $vas->vasCode;
      }
    }
    return implode(', ',$result);
  }

  public function getVasPrice(){
    $content = json_decode($this->getContent());
    $total = 0;
    //tien goi vas chi tinh khi dang ky thue bao tra truoc
    if($this->getOrderType() == OrderTypeEnum::PREPAID) {
      $listVas = $content->productInfo->vasInfos;
      if (!empty($listVas)) {
        foreach ($listVas as $vas) {
          $total += $vas->price;
        }
      }
    }
    return $total;
  }

  public function getSimNumber(){
    $content = json_decode($this->getContent());
    return $content->isdn;
  }

  public function getContactPhone(){
    $content = json_decode($this->getContent());
    return $content->recipientPhone;
  }

  public function getSimPrice(){
    $content = json_decode($this->getContent());
    return $this->getOrderType() == OrderTypeEnum::PREPAID ? $content->isdnPledgeInfo->price : $content->isdnPledgeInfo->posPrice;
  }

  public function getMainPackagePrice(){
    $content = json_decode($this->getContent());
    return $this->getOrderType() == OrderTypeEnum::PREPAID ? $content->productInfo->price : 0;
  }

  public function getOtherServicePrice(){
    $content = json_decode($this->getContent());
    return $this->getOrderType() == OrderTypeEnum::PREPAID ? ($content->chargeCardAmound - $this->getMainPackagePrice()) : 0;
  }

  public function getTransportFee(){
    $content = json_decode($this->getContent());
    $total = 0;
    foreach ($content->feeRecords as $feeRecord){
      if($feeRecord->feeCode == 'TRANSFER_FEE'){
        $total += $feeRecord->feeAmount;
        break;
      }
    }
    return $total;
  }

  public function getSimPriceFormat(){
    return VtHelper::formatNumber($this->getSimPrice());
  }
  public function getMainPackagePriceFormat(){
    return VtHelper::formatNumber($this->getMainPackagePrice());
  }
  public function getOtherServicePriceFormat(){
    return VtHelper::formatNumber($this->getOtherServicePrice());
  }
  public function getTransportFeeFormat(){
    return VtHelper::formatNumber($this->getTransportFee());
  }
  public function getAmountFormat(){
    return VtHelper::formatNumber($this->getAmount());
  }
  public function getVasPriceFormat(){
    return VtHelper::formatNumber($this->getVasPrice());
  }
  public function getBasePriceFormat(){
    return VtHelper::formatNumber($this->getBasePrice());
  }

  public function getIsdnLogin(){
    $content = json_decode($this->getContent());
    return $content->account;
  }

  public function getStatusName()
    {
        $content = json_decode($this->getContent());
        $isDataCM = isset($content->dataCM) ? true : false;
        return VtCttStatusEnum::getStatusName($this->getStatus(), $this->getAmount(), $isDataCM);
    }

  public function getStatusFormat(){
      return $this->getStatus();
  }

  public function getRefundStatusFormat(){
      return $this->getRefundStatus();
  }
    public function getRefundStatusName(){
        return self::getArr($this->getRefundStatus());
    }
  public function getRefundStatus1(){
    $status = "";
//    $vpg = $this->getVtVpgTransaction();
//    if($vpg && $vpg->getTranId())
//      $status = $vpg->getRefundStatus();
//    elseif($this->getOmniErrorCode() != 0)
//      $status = 'Chưa hoàn tiền';

    if($this->getOmniErrorCode() != 0 && !is_null($this->getOmniErrorCode())) {
      if (!is_null($this->getRefundErrorCode())) {
        $status = $this->getRefundErrorCode() == '00' ? 'Đã hoàn tiền' : 'Chưa hoàn tiền';
      }
    }
    return $status;
  }
  
  public function getServiceTypeName(){
		if($this->getCttPackage())
			return $this->getCttPackage() == 1 ? "Trả trước" : "Trả sau";
		return "";
  }

  public function getServiceType()
  {
    $i18n = sfContext::getInstance()->getI18N();
    $serviceIndicator = $this->getServiceIndicator();
    $serviceType = '';
    if ($serviceIndicator) {
      if ($serviceIndicator == 'F') {
        $serviceType = $i18n->__('Internet');
      } elseif ($serviceIndicator == '2' || $serviceIndicator == 'U') {
        $serviceType = $i18n->__('Truyền hình');
      } else {
        $serviceType = $i18n->__('Combo');
      }
    }
    return $serviceType;
  }

  public function getTotalFee()
  {
    $content = json_decode($this->getContent());
    $totalFee = $content->dataOrder->totalFee;
    return VtHelper::formatNumber($totalFee);
  }

  public function getPolicy()
  {
    $content = json_decode($this->getContent());
    $products = $content->dataOrder->productInfos;
    $policy = $products[0]->prepaidDesc;
    return $policy;
  }

  public function getChargeTime()
  {
    $vpg = $this->getVtVpgTransaction();
    $chargeTime = $vpg->getCreatedAt();
    return $chargeTime;
  }
    public static function getArr($type){
        $i18n = sfContext::getInstance()->getI18N();
        switch ($type){
            case 1:
                $message =  $i18n->__('Hoàn tiền thành công');
                break;
            case 2:
                $message =  $i18n->__('Hoàn tiền thất bại');
                break;
            case 3:
                $message = $i18n->__('Gửi hoàn tiền thành công');
                break;
            case 4:
                $message =  $i18n->__('Gửi hoàn tiền thất bại');
                break;
            default:
                $message =  $i18n->__('Chờ xác nhận hoàn tiền');
                break;
        }
        return $message;
    }
    
    public function getPrepaidCode()
    {
        $content = json_decode($this->getContent());
        $products = $content->dataOrder->productInfos;
        $prepaidCode = $products[0]->prepaidCode;
        return $prepaidCode;
    }

    public function getTotalPrepaidAmount()
    {
        $content = json_decode($this->getContent());
        $products = $content->dataOrder->productInfos;
        $totalPrepaidAmount = $products[0]->totalPrepaidAmount;
        return $totalPrepaidAmount;
    }
    
    public function getOmniProcessId()
    {
        $content = json_decode($this->getContent());
        $subscriber = $content->dataCM->subscriberDTO;
        $omniProcessId = $subscriber->omniProcessId;
        return $omniProcessId;
    }

    public function getPackageName(){
      if(in_array($this->getOrderType(), [22,23])){
        return $this->getCttPackage();
      }
      return "";
    }

}